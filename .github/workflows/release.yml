name: Release

on:
  push:
    branches:
      - master
      - next
      - next-major
      - beta
      - alpha
      - "[0-9]+.[0-9]+.x"
      - "[0-9]+.x"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read

jobs:
  get-next-version:
    name: Get Next Version
    permissions:
      contents: write
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@0cdefe1224944c23645e5131f7a5189672c0df92

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: get-next-version
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Install semantic-release-cargo
        if: needs.get-next-version.outputs.new-release-published == 'true'
        uses: EricCrosson/install-github-release-binary@6908366f8ad1cd8e9301c3d9d11c59228206d199
        with:
          targets: semantic-release-cargo/semantic-release-cargo@v2

      - name: Prepare semantic-release for Rust
        if: needs.get-next-version.outputs.new-release-published == 'true'
        run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2
        with:
          components: rustfmt, clippy

      - name: Cache Cargo
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/toolchains/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: Cargo.toml
          if-no-files-found: error
          retention-days: 1
          path: |
            Cargo.toml

  build:
    name: Build
    needs: test
    env:
      CARGO: cargo
    strategy:
      matrix:
        include:
          # Linux
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          # - target: aarch64-unknown-linux-musl
          #   os: ubuntu-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          # Windows
          # - target: aarch64-pc-windows-msvc
          #   os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # macOS
          # - target: x86_64-apple-darwin
          #   os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
      
      - name: Download updated Cargo.toml
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: Cargo.toml
          path: .

      - name: Install Rust
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2
        with:
          components: rustfmt, clippy

      - name: Cache Cargo
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/toolchains/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install tooling
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install \
            gcc-aarch64-linux-gnu \
            musl-tools

      - name: Add toolchain
        run: rustup target add ${{ matrix.target }}

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create binary checksum
        run: shasum --algorithm 256 --binary bicep-docs${{ matrix.os == 'windows-latest' && '.exe' || '' }} | tee SHA256SUM.txt
        working-directory: target/${{ matrix.target }}/release

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: bicep-docs-${{ matrix.target }}
          if-no-files-found: error
          retention-days: 1
          path: |
            target/${{ matrix.target }}/release/bicep-docs${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            target/${{ matrix.target }}/release/SHA256SUM.txt

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: github.repository == 'oWretch/bicep-docs'
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '22'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2

      - name: Cache Cargo
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/toolchains/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Download artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          pattern: bicep-docs-*
          path: dist

      - name: Combine checksums
        run: cat dist/**/SHA256SUM.txt | tee dist/SHA256SUMS.txt

      - name: List artifacts
        run: ls -alR .
        working-directory: dist

      - name: Install dependencies
        run: npm ci

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: npx semantic-release
