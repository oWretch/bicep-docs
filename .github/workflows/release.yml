name: Release

on:
  push:
    branches:
      - main
      - next
      - next-major
      - beta
      - alpha
      - "[0-9]+.[0-9]+.x"
      - "[0-9]+.x"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read

jobs:
  get-next-version:
    name: Get Next Version
    permissions:
      contents: write
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@0cdefe1224944c23645e5131f7a5189672c0df92

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: get-next-version
    if: needs.get-next-version.outputs.new-release-published == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Install semantic-release-cargo
        if: needs.get-next-version.outputs.new-release-published == 'true'
        uses: EricCrosson/install-github-release-binary@f3850d90f217d21d542432c8256e80ddcb4807cd
        with:
          targets: semantic-release-cargo/semantic-release-cargo@v2

      - name: Prepare semantic-release for Rust
        if: needs.get-next-version.outputs.new-release-published == 'true'
        run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Cache Cargo
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/toolchains/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2
        with:
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: Cargo.toml
          if-no-files-found: error
          retention-days: 1
          path: |
            Cargo.toml

  build:
    name: Build
    needs:
      - test
      - get-next-version
    permissions:
      contents: read
      packages: write
    env:
      CARGO: cargo
    strategy:
      matrix:
        include:
          # Linux GNU
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            docker: false
            dockerFile: ""
            dockerArch: ""
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            docker: false
            dockerFile: ""
            dockerArch: ""
          # Linux MUSL
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            docker: true
            dockerFile: Dockerfile
            dockerArch: linux/arm64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            docker: true
            dockerFile: Dockerfile
            dockerArch: linux/amd64
          # Windows
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            docker: false
            dockerFile: ""
            dockerArch: ""
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            docker: false
            dockerFile: ""
            dockerArch: ""
          # macOS
          - target: aarch64-apple-darwin
            os: macos-latest
            docker: false
            dockerFile: ""
            dockerArch: ""
          - target: x86_64-apple-darwin
            os: macos-latest
            docker: false
            dockerFile: ""
            dockerArch: ""
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Download updated Cargo.toml
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: Cargo.toml
          path: .

      - name: Cache Cargo
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/toolchains/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2
        with:
          components: rustfmt, clippy
          targets: ${{ matrix.target }}

      - name: Add cross-compilation toolchain
        run: cargo install cross

      - name: Build release
        run: cross build --release --target ${{ matrix.target }}

      - name: Create release zip
        if: matrix.os != 'windows-latest'
        run: zip -j bicep-docs-${{ matrix.target }}.zip bicep-docs
        working-directory: target/${{ matrix.target }}/release

      - name: Create release zip
        if: matrix.os == 'windows-latest'
        run: 7z a bicep-docs-${{ matrix.target }}.zip bicep-docs.exe
        working-directory: target/${{ matrix.target }}/release

      - name: Create binary checksum
        run: shasum --algorithm 256 --binary bicep-docs${{ matrix.os == 'windows-latest' && '.exe' || '' }} | tee SHA256SUM.txt
        working-directory: target/${{ matrix.target }}/release

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: bicep-docs-${{ matrix.target }}
          if-no-files-found: error
          retention-days: 1
          path: |
            target/${{ matrix.target }}/release/bicep-docs-${{ matrix.target }}.zip
            target/${{ matrix.target }}/release/SHA256SUM.txt

      # Docker images
      - name: Set up QEMU
        if: matrix.docker && matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: matrix.docker
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: matrix.docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: docker-build
        if: matrix.docker
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.dockerFile }}
          context: .
          tags: ghcr.io/owretch/bicep-docs
          platforms: ${{ matrix.dockerArch}}
          build-args: |
            BIN_PATH=./dist/target/${{ matrix.target }}/release/bicep-docs${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        if: matrix.docker
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.docker-build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        if: matrix.docker
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.target }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  release:
    name: Release
    needs:
      - build
      - get-next-version
    runs-on: ubuntu-latest
    if: github.repository == 'oWretch/bicep-docs'
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: "22"

      - name: Cache Cargo
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/toolchains/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2

      - name: Download binaries
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          pattern: bicep-docs-*
          path: dist

      - name: List binaries
        run: ls -alR .
        working-directory: dist

      - name: Install dependencies
        run: npm ci

      - name: Download Docker digests
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/owretch/bicep-docs
          tags: |
            type=semver,pattern={{version}},value=${{ needs.get-next-version.outputs.new-release-version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.get-next-version.outputs.new-release-version }}
            type=semver,pattern={{major}},value=${{ needs.get-next-version.outputs.new-release-version }}

      - name: Create Docker manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/owretch/bicep-docs@sha256:%s ' *)
          docker buildx imagetools inspect ghcr.io/owretch/bicep-docs:${{ steps.meta.outputs.version }}

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
